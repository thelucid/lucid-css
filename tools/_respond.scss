@charset "UTF-8";

// Defaults.
$respond-em-size: 16 !default;

$responds: (
  small:  560,
  medium: 850,
  large:  1100,
  huge:   1400,
  nav:    768
) !default;

// Simply defines a media query based on $responds map values or specified
// values, with an interface that is purposely compatible with that of sass-mq.
//
// Examples:
//   @include respond(mobile) {
//     h1 { color: red; }
//   }
//   @include respond($from: mobile) {
//     h1 { color: red; }
//   }
//   @include respond($until: mobile) {
//     h1 { color: red; }
//   }
//   @include respond(400) {
//     h1 { color: red; }
//   }
//   @include respond($until: 400) {
//     h1 { color: red; }
//   }
//   @include respond($from: mobile, $and: '(orientation: landscape)) {
//     h1 { color: red; }
//   }
//
@mixin respond($from: null, $until: null, $and: null) {
  @if $from {
    @if type-of($from) != number { $from: map-get($responds, $from); }
    @if unit($from) != em { $from: $from / $respond-em-size * 1em; }
  }
  @if $until {
    @if type-of($until) != number { $until: map-get($responds, $until); }
    @if unit($until) != em { $until: $until / $respond-em-size * 1em; }
    
    // Prevent overlapping media queries.
    $until: $until - .01em;
  }
  
  $query: "only screen";
  
  @if ($from) { $query: "#{$query} and (min-width: #{$from})"; }
  @if ($until) { $query: "#{$query} and (max-width: #{$until})"; }
  @if $and { $query: "#{$query} and #{$and}"; }
  
  @media #{$query} { @content; }
}